require(gridExtra)
data_train %<>% transform(., Survived = as.factor(Survived),
Pclass = as.factor(Pclass),
Sex = as.factor(Sex),
Embarked = as.factor(Embarked),
SibSp = as.numeric(SibSp))
colours <- rainbow_hcl(4, start = 30, end = 300)
ggbar <- ggplot(data_train) + geom_bar(stat = "bin", width=.6, fill= colours[3], colour="black") +
guides(fill=FALSE) + ylab(NULL)
g1 <- ggbar + aes(x = factor(Survived, labels = c("Погиб", "Выжил"))) +
ggtitle("Распределение погибших\n и спасшихся пассажиров") + xlab(NULL)
g2 <- ggbar + aes(x = factor(Pclass, labels = c("Первый", "Второй", "Третий"))) +
ggtitle("Распределение пассажиров\n по классам обслуживания") + xlab(NULL)
g3 <- ggbar + aes(x = factor(Sex, labels = c("Женщина", "Мужчина"))) +
ggtitle("Распределение пассажиров между полами") + xlab(NULL)
g4 <- ggbar + aes(x = as.factor(SibSp)) +
ggtitle("Распределение пассажиров по сумме\n 'супруг + братья и сёстры на борту корабля'") +
xlab(NULL)
g5 <- ggbar + aes(x = as.factor(Parch)) +
ggtitle("Распределение пассажиров по сумме\n 'родители + дети на борту'") + xlab(NULL)
g6 <- ggbar + aes(x = factor(Embarked, labels = c("Cherbourg", "Queenstown", "Southampton"))) +
ggtitle("Распределение пассажиров\n по пункту отправления") +
xlab(NULL)
gghist <- ggplot(data_train) + geom_histogram(fill= colours[4]) + guides(fill=FALSE) + ylab(NULL)
g7 <- gghist + aes(x = Age) + xlab(NULL) + ggtitle("Распределение пассажиров по возрастам")
g8 <- gghist + aes(x = Fare) + xlab(NULL) + ggtitle("Распределение пассажиров\n по стоимости билетов")
grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8, ncol = 2, nrow=4)
data_train$Embarked[is.na(data_train$Embarked)] <- "S"
require(stringr)
data_train$Title <-  data_train$Name %>% str_extract(., "\\w+\\.") %>% str_sub(.,1, -2)
unique(data_train$Title)
mean_title <- data_train %>% group_by(Title) %>%
summarise(count = n(), Missing = sum(is.na(Age)), Mean = round(mean(Age, na.rm = T), 2))
mean_title
impute.mean <- function (impute_col, filter_var, var_levels) {
for (lev in var_levels) {
impute_col[(filter_var == lev) & is.na(impute_col)] <-
mean(impute_col[filter_var == lev], na.rm = T)
}
return (impute_col)
}
data_train$Age <- impute.mean(data_train$Age, data_train$Title, c("Dr", "Master", "Mrs", "Miss", "Mr"))
summary(data_train$Age)
data_train$Fare[data_train$Fare == 0] <- NA
data_train$Fare <- impute.mean(data_train$Fare, data_train$Pclass, as.numeric(levels(data_train$Pclass)))
change.titles <- function(data, old_title, new_title) {
for (title in old_title) {
data$Title[data$Title == title] <- new_title
}
return (data$Title)
}
data_train$Title <- change.titles(data_train,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir", "Countess"),
"Aristocratic")
data_train$Title <- change.titles(data_train, c("Ms"),
"Mrs")
data_train$Title <- change.titles(data_train, c("Mlle", "Mme"), "Miss")
data_train$Title <- as.factor(data_train$Title)
ggplot(data_train, aes(x = factor(Title,
c("Aristocratic", "Mrs", "Mr", "Miss", "Master")),
y = Age)) + geom_boxplot(fill= colours[3]) + guides(fill=FALSE) +
guides(fill=guide_legend(title=NULL)) + ylab("Возраст") + xlab(NULL)
data_train$Family <- data_train$SibSp + data_train$Parch
ggplot(data_train, aes(x = factor(Family), y = as.numeric(as.character(Survived)))) +
stat_summary( fun.y = mean, ymin=0, ymax=1, geom="bar", size=4, fill= colours[2]) +
xlab("Кол-во родственников на борту корабля") + ylab("Процент выживаемости") + facet_grid(Sex ~ .)
data_train$isFamily <- as.factor(as.numeric(data_train$Family > 0))
ggplot( data_train, aes(x=factor(isFamily, labels =c("Нет", "Есть")),y=as.numeric(as.character(Survived))) ) +
stat_summary( fun.y = mean, ymin=0, ymax=1, geom="bar", size=4, fill= colours[2]) +
ylab("Процент выживаемости") + xlab("Наличие родственников на борту корабля")
data_train$isCabin <- factor(ifelse(is.na(data_train$Cabin),0,1))
ggplot( data_train, aes(x=factor(isCabin, labels =c("Нет", "Есть")),y=as.numeric(as.character(Survived))) ) +
stat_summary( fun.y = mean, ymin=0, ymax=1, geom="bar", size=4, fill= colours[3]) +
ylab("Процент выживаемости") + xlab("Наличие номера каюты")
ggplot(data_train, aes(x = factor(isCabin, labels =c("Нет", "Есть")), y = as.numeric(as.character(Survived)))) +
stat_summary( fun.y = "mean", geom="bar", ymin=0, ymax=1, fill= colours[3]) +
facet_grid(Pclass ~ Sex) + ylab("Процент выживаемости") + xlab("Наличие номера каюты")
data_train %<>% select(Survived, Pclass, Sex, Age, Fare, Embarked, Title, Family, isFamily, isCabin)
require(plyr)
require(dplyr)
data_train$Survived %<>% revalue(., c("0"="Died", "1" = "Survived"))
data_train$Pclass %<>% revalue(., c("1"="First", "2"="Second", "3"="Third"))
data_train$Sex %<>% revalue(., c("female"="Female", "male"="Male"))
data_train$isFamily %<>% revalue(., c("0"="No", "1"="Yes"))
data_train$isCabin %<>% revalue(., c("0"="No", "1"="Yes"))
require(caret)
set.seed(111)
split <- createDataPartition(data_train$Survived, p = 0.8, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
cv_ctrl <- trainControl(method = "repeatedcv", repeats = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE)
set.seed(111)
glm.tune.1 <- train(Survived ~ Pclass + Sex + Age + Fare + Embarked + Title + Family + isFamily + isCabin,
data = train,
method = "glm",
metric = "ROC",
trControl = cv_ctrl)
glm.tune.1
summary(glm.tune.1)
set.seed(111)
glm.tune.2 <- train(Survived ~ Pclass + Age + I(Embarked=="S") + Title + Family + isFamily + isCabin,
data = train,
method = "glm",
metric = "ROC",
trControl = cv_ctrl)
glm.tune.2
summary(glm.tune.2)
set.seed(111)
glm.tune.3 <- train(Survived ~ I(Pclass=="Third") +
Age +
I(Embarked=="S") +
I(Title=="Master") +
I(Title=="Miss") +
I(Title=="Mrs")  +
Family +
isCabin,
data = train,
method = "glm",
metric = "ROC",
trControl = cv_ctrl)
glm.tune.3
summary(glm.tune.3)
set.seed(111)
glm.tune.4 <- train(Survived ~ Pclass +
Age +
I(Embarked=="S") +
I(Title=="Master") +
I(Title=="Miss") +
I(Title=="Mrs")  +
Family +
isCabin +
I(Title=="Mr"& Pclass=="Third"),
data = train,
method = "glm",
metric = "ROC",
trControl = cv_ctrl)
glm.tune.4
summary(glm.tune.4)
rf.grid <- data.frame(.mtry = c(2, 3))
set.seed(111)
rf.tune <- train(Survived ~ Pclass + Sex + Age + Fare + Embarked + Title + Family + isFamily + isCabin,
data = train,
method = "rf",
metric = "ROC",
tuneGrid = rf.grid,
trControl = cv_ctrl)
set.seed(111)
svm.tune <- train(Survived ~ Pclass + Sex + Age + Fare + Embarked + Title + Family + isFamily + isCabin,
data = train,
method = "svmRadial",
tuneLength = 9,
preProcess = c("center", "scale"),
metric = "ROC",
trControl = cv_ctrl)
svm.tune
plot(svm.tune)
glm.pred <- predict(glm.tune.4, test)
confusionMatrix(glm.pred, test$Survived)
rf.pred <- predict(rf.tune, test)
confusionMatrix(rf.pred, test$Survived)
svm.pred <- predict(svm.tune, test)
confusionMatrix(svm.pred, test$Survived)
glm.probs <- predict(glm.tune.4, test, type = "prob")
glm.ROC <- roc(response = test$Survived,
predictor = glm.probs$Survived,
levels = levels(test$Survived))
glm.ROC$auc
plot(glm.ROC, type="S")
rf.probs <- predict(rf.tune, test, type = "prob")
rf.ROC <- roc(response = test$Survived,
predictor = rf.probs$Survived,
levels = levels(test$Survived))
rf.ROC$auc
plot(rf.ROC, add=TRUE, col="red")
svm.probs <- predict(svm.tune, test, type = "prob")
svm.ROC <- roc(response = test$Survived,
predictor = svm.probs$Survived,
levels = levels(test$Survived))
svm.ROC$auc
plot(svm.ROC, add=TRUE, col="blue")
resamps <- resamples(list(Logit = glm.tune.4, RF = rf.tune, SVM = svm.tune))
summary(resamps)
bwplot(resamps, layout = c(3, 1))
dotplot(resamps, metric = "ROC")
data_test$Cabin <- recode(data_test$Cabin, "'' = NA")
data_test$Embarked <- recode(data_test$Embarked, "'' = NA")
data_test %<>% transform(.,Pclass = as.factor(Pclass),
Sex = as.factor(Sex),
Embarked = as.factor(Embarked),
SibSp = as.numeric(SibSp))
data_test$Embarked[is.na(data_test$Embarked)] <- "S"
data_test$Title <-  data_test$Name %>% str_extract(., "\\w+\\.") %>% str_sub(.,1, -2)
data_test %>% group_by(Title) %>%
summarise(count = n(), Missing = sum(is.na(Age)), Mean = round(mean(Age, na.rm = T), 2))
impute.mean.test <- function (impute_col, filter_var, var_levels) {
for (lev in var_levels) {
impute_col[(filter_var == lev) & is.na(impute_col)] <-
mean_title$Mean[mean_title$Title == lev]
#mean(impute_col[filter_var == lev], na.rm = T)
}
return (impute_col)
}
data_test$Age <- impute.mean(data_test$Age, data_test$Title, c("Ms", "Master", "Mrs", "Miss", "Mr"))
data_test$Fare[data_test$Fare == 0] <- NA
data_test$Fare <- impute.mean(data_test$Fare, data_test$Pclass, as.numeric(levels(data_test$Pclass)))
data_test$Title <- change.titles(data_test,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir", "Countess"),
"Aristocratic")
data_test$Title <- change.titles(data_test, c("Ms"),
"Mrs")
data_test$Title <- change.titles(data_test, c("Mlle", "Mme"), "Miss")
data_test$Title <- as.factor(data_test$Title)
data_test$Family <- data_test$SibSp + data_test$Parch
data_test$isFamily <- as.factor(as.numeric(data_test$Family > 0))
data_test$isCabin <- factor(ifelse(is.na(data_test$Cabin),0,1))
data_test %<>% select(PassengerId, Pclass, Sex, Age, Fare, Embarked, Title, Family, isFamily, isCabin)
data_test$Pclass %<>% revalue(., c("1"="First", "2"="Second", "3"="Third"))
data_test$Sex %<>% revalue(., c("female"="Female", "male"="Male"))
data_test$isFamily %<>% revalue(., c("0"="No", "1"="Yes"))
data_test$isCabin %<>% revalue(., c("0"="No", "1"="Yes"))
Survived <- predict(glm.tune.4, newdata = data_test)
predictions <- as.data.frame(Survived)
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
predictions$PassengerId <- data_test$PassengerId
data_test <- read_csv("test.csv")
data_test$Cabin <- recode(data_test$Cabin, "'' = NA")
data_test$Embarked <- recode(data_test$Embarked, "'' = NA")
data_test %<>% transform(.,Pclass = as.factor(Pclass),
Sex = as.factor(Sex),
Embarked = as.factor(Embarked),
SibSp = as.numeric(SibSp))
data_test$Embarked[is.na(data_test$Embarked)] <- "S"
data_test$Title <-  data_test$Name %>% str_extract(., "\\w+\\.") %>% str_sub(.,1, -2)
data_test %>% group_by(Title) %>%
summarise(count = n(), Missing = sum(is.na(Age)), Mean = round(mean(Age, na.rm = T), 2))
data_test$Age <- impute.mean.test(data_test$Age, data_test$Title, c("Ms", "Master", "Mrs", "Miss", "Mr"))
data_test$Fare[data_test$Fare == 0] <- NA
data_test$Fare <- impute.mean(data_test$Fare, data_test$Pclass, as.numeric(levels(data_test$Pclass)))
data_test$Title <- change.titles(data_test,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir", "Countess"),
"Aristocratic")
data_test$Title <- change.titles(data_test, c("Ms"),
"Mrs")
data_test$Title <- change.titles(data_test, c("Mlle", "Mme"), "Miss")
data_test$Title <- as.factor(data_test$Title)
data_test$Family <- data_test$SibSp + data_test$Parch
data_test$isFamily <- as.factor(as.numeric(data_test$Family > 0))
data_test$isCabin <- factor(ifelse(is.na(data_test$Cabin),0,1))
data_test %<>% select(PassengerId, Pclass, Sex, Age, Fare, Embarked, Title, Family, isFamily, isCabin)
data_test$Pclass %<>% revalue(., c("1"="First", "2"="Second", "3"="Third"))
data_test$Sex %<>% revalue(., c("female"="Female", "male"="Male"))
data_test$isFamily %<>% revalue(., c("0"="No", "1"="Yes"))
data_test$isCabin %<>% revalue(., c("0"="No", "1"="Yes"))
Survived <- predict(glm.tune.4, newdata = data_test)
predictions <- as.data.frame(Survived)
predictions$PassengerId <- data_test$PassengerId
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
Survived <- predict(glm.tune.4, newdata = data_test)
Survived <- revalue(Survived, c("Survived" = 1, "Perished" = 0))
Survived <- predict(glm.tune.4, newdata = data_test)
Survived <- revalue(Survived, c("Survived" = 1, "Died" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerId <- data_test$PassengerId
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
Survived <- predict(rf.tune, newdata = data_test)
data_test <- read_csv("test.csv")
data_test$Cabin <- recode(data_test$Cabin, "'' = NA")
data_test$Embarked <- recode(data_test$Embarked, "'' = NA")
data_test %<>% transform(.,Pclass = as.factor(Pclass),
Sex = as.factor(Sex),
Embarked = as.factor(Embarked),
SibSp = as.numeric(SibSp))
data_test$Embarked[is.na(data_test$Embarked)] <- "S"
data_test$Title <-  data_test$Name %>% str_extract(., "\\w+\\.") %>% str_sub(.,1, -2)
data_test %>% group_by(Title) %>%
summarise(count = n(), Missing = sum(is.na(Age)), Mean = round(mean(Age, na.rm = T), 2))
data_test$Age <- impute.mean.test(data_test$Age, data_test$Title, c("Ms", "Master", "Mrs", "Miss", "Mr"))
data_test$Fare[data_test$Fare == 0] <- NA
data_test$Fare <- impute.mean(data_test$Fare, data_test$Pclass, as.numeric(levels(data_test$Pclass)))
data_test$Title <- change.titles(data_test,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir", "Countess", "Dona"),
"Aristocratic")
data_test$Title <- change.titles(data_test, c("Ms"),
"Mrs")
data_test$Title <- change.titles(data_test, c("Mlle", "Mme"), "Miss")
data_test$Title <- as.factor(data_test$Title)
data_test$Family <- data_test$SibSp + data_test$Parch
data_test$isFamily <- as.factor(as.numeric(data_test$Family > 0))
data_test$isCabin <- factor(ifelse(is.na(data_test$Cabin),0,1))
data_test %<>% select(PassengerId, Pclass, Sex, Age, Fare, Embarked, Title, Family, isFamily, isCabin)
data_test$Pclass %<>% revalue(., c("1"="First", "2"="Second", "3"="Third"))
data_test$Sex %<>% revalue(., c("female"="Female", "male"="Male"))
data_test$isFamily %<>% revalue(., c("0"="No", "1"="Yes"))
data_test$isCabin %<>% revalue(., c("0"="No", "1"="Yes"))
Survived <- predict(rf.tune, newdata = data_test)
Survived <- revalue(Survived, c("Survived" = 1, "Died" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerId <- data_test$PassengerId
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
Survived <- predict(svm.tune, newdata = data_test)
Survived <- revalue(Survived, c("Survived" = 1, "Died" = 0))
predictions <- as.data.frame(Survived)
predictions$PassengerId <- data_test$PassengerId
write.csv(predictions[,c("PassengerId", "Survived")],
file="Titanic_predictions.csv", row.names=FALSE, quote=FALSE)
glm.probs <- predict(glm.tune.4, test, type = "prob")
glm.ROC <- roc(response = test$Survived,
predictor = glm.probs$Survived,
levels = levels(test$Survived))
glm.ROC$auc
plot(glm.ROC, type="S")
rf.probs <- predict(rf.tune, test, type = "prob")
rf.ROC <- roc(response = test$Survived,
predictor = rf.probs$Survived,
levels = levels(test$Survived))
rf.ROC$auc
plot(rf.ROC, add=TRUE, col="red")
svm.probs <- predict(svm.tune, test, type = "prob")
svm.ROC <- roc(response = test$Survived,
predictor = svm.probs$Survived,
levels = levels(test$Survived))
svm.ROC$auc
plot(svm.ROC, add=TRUE, col="blue")
set.seed(111)
glm.tune.1 <- train(Survived ~ Pclass + Sex + Age + Fare + Embarked + Family,
data = train,
method = "glm",
metric = "ROC",
trControl = cv_ctrl)
glm.tune.1
summary(glm.tune.1)
rf.tune
summary(rf.tune)
rm(list=ls())
require(readr)
data_train <- read_csv("train.csv")
data_test <- read_csv("test.csv")
require(magrittr)
require(dplyr)
data_train %>% select(Name, Sex, Ticket, Cabin, Embarked) %>% apply(., 2, function(column) sum(column == ""))
sum(is.na(data_train$Embarked))
data_train$Embarked[data_train$Embarked == ""] <- NA
sum(is.na(data_train$Embarked))
data_train %>% select(Name, Sex, Ticket, Cabin, Embarked) %>% apply(., 2, function(column) sum(column == ""))
data_train$Cabin[data_train$Cabin == ""] <- NA
fix(data_train)
which(is.na(data_train$Embarked))
fix(data_train)
require(colorspace)
colors_A <- sequential_hcl(2)
require(Amelia)
missmap(data_train, col = colors_A, legend=FALSE)
fix(data_train)
require(readr)
data_train <- read_csv("train.csv")
data_test <- read_csv("test.csv")
require(colorspace)
colors_A <- sequential_hcl(2)
require(Amelia)
missmap(data_train, col = colors_A, legend=FALSE)
data_train$Cabin[data_train$Cabin == ""] <- NA
require(colorspace)
colors_A <- sequential_hcl(2)
require(Amelia)
missmap(data_train, col = colors_A, legend=FALSE)
sum(is.na(data_train$Cabin))
require(readr)
data_train <- read_csv("train.csv")
data_test <- read_csv("test.csv")
require(magrittr)
require(dplyr)
data_train %>% select(Name, Sex, Ticket, Cabin, Embarked) %>% apply(., 2, function(column) sum(column == ""))
require(car)
data_train$Cabin <- recode(data_train$Cabin, "'' = NA")
data_train$Embarked <- recode(data_train$Embarked, "'' = NA")
data_train$Embarked[is.na(data_train$Embarked)] <- "S"
## Для создания графиков в этом исследовании я буду стараться использовать пакет 'ggplot2'
require(ggplot2)
require(gridExtra)
data_train %<>% transform(., Survived = as.factor(Survived),
Pclass = as.factor(Pclass),
Sex = as.factor(Sex),
Embarked = as.factor(Embarked),
SibSp = as.numeric(SibSp))
colours <- rainbow_hcl(4, start = 30, end = 300)
ggbar <- ggplot(data_train) + geom_bar(stat = "bin", width=.6, fill= colours[3], colour="black") +
guides(fill=FALSE) + ylab(NULL)
g1 <- ggbar + aes(x = factor(Survived, labels = c("Погиб", "Выжил"))) +
ggtitle("Распределение погибших\n и спасшихся пассажиров") + xlab(NULL)
g2 <- ggbar + aes(x = factor(Pclass, labels = c("Первый", "Второй", "Третий"))) +
ggtitle("Распределение пассажиров\n по классам обслуживания") + xlab(NULL)
g3 <- ggbar + aes(x = factor(Sex, labels = c("Женщина", "Мужчина"))) +
ggtitle("Распределение пассажиров между полами") + xlab(NULL)
g4 <- ggbar + aes(x = as.factor(SibSp)) +
ggtitle("Распределение пассажиров по сумме\n 'супруг + братья и сёстры на борту корабля'") +
xlab(NULL)
g5 <- ggbar + aes(x = as.factor(Parch)) +
ggtitle("Распределение пассажиров по сумме\n 'родители + дети на борту'") + xlab(NULL)
g6 <- ggbar + aes(x = factor(Embarked, labels = c("Cherbourg", "Queenstown", "Southampton"))) +
ggtitle("Распределение пассажиров\n по пункту отправления") +
xlab(NULL)
gghist <- ggplot(data_train) + geom_histogram(fill= colours[4]) + guides(fill=FALSE) + ylab(NULL)
g7 <- gghist + aes(x = Age) + xlab(NULL) + ggtitle("Распределение пассажиров по возрастам")
g8 <- gghist + aes(x = Fare) + xlab(NULL) + ggtitle("Распределение пассажиров\n по стоимости билетов")
grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8, ncol = 2, nrow=4)
require(stringr)
data_train$Title <-  data_train$Name %>% str_extract(., "\\w+\\.") %>% str_sub(.,1, -2)
unique(data_train$Title)
mean_title <- data_train %>% group_by(Title) %>%
summarise(count = n(), Missing = sum(is.na(Age)), Mean = round(mean(Age, na.rm = T), 2))
mean_title
impute.mean <- function (impute_col, filter_var, var_levels) {
for (lev in var_levels) {
impute_col[(filter_var == lev) & is.na(impute_col)] <-
mean(impute_col[filter_var == lev], na.rm = T)
}
return (impute_col)
}
data_train$Age <- impute.mean(data_train$Age, data_train$Title, c("Dr", "Master", "Mrs", "Miss", "Mr"))
summary(data_train$Age)
data_train$Fare[data_train$Fare == 0] <- NA
data_train$Fare <- impute.mean(data_train$Fare, data_train$Pclass, as.numeric(levels(data_train$Pclass)))
change.titles <- function(data, old_title, new_title) {
for (title in old_title) {
data$Title[data$Title == title] <- new_title
}
return (data$Title)
}
data_train$Title <- change.titles(data_train,
c("Capt", "Col", "Don", "Dr",
"Jonkheer", "Lady", "Major",
"Rev", "Sir", "Countess"),
"Aristocratic")
data_train$Title <- change.titles(data_train, c("Ms"),
"Mrs")
data_train$Title <- change.titles(data_train, c("Mlle", "Mme"), "Miss")
data_train$Title <- as.factor(data_train$Title)
ggplot(data_train, aes(x = factor(Title,
c("Aristocratic", "Mrs", "Mr", "Miss", "Master")),
y = Age)) + geom_boxplot(fill= colours[3]) + guides(fill=FALSE) +
guides(fill=guide_legend(title=NULL)) + ylab("Возраст") + xlab(NULL)
data_train$Family <- data_train$SibSp + data_train$Parch
ggplot(data_train, aes(x = factor(Family), y = as.numeric(as.character(Survived)))) +
stat_summary( fun.y = mean, ymin=0, ymax=1, geom="bar", size=4, fill= colours[2]) +
xlab("Кол-во родственников на борту корабля") + ylab("Процент выживаемости") + facet_grid(Sex ~ .)
data_train$isFamily <- as.factor(as.numeric(data_train$Family > 0))
ggplot( data_train, aes(x=factor(isFamily, labels =c("Нет", "Есть")),y=as.numeric(as.character(Survived))) ) +
stat_summary( fun.y = mean, ymin=0, ymax=1, geom="bar", size=4, fill= colours[2]) +
ylab("Процент выживаемости") + xlab("Наличие родственников на борту корабля")
data_train$isCabin <- factor(ifelse(is.na(data_train$Cabin),0,1))
ggplot( data_train, aes(x=factor(isCabin, labels =c("Нет", "Есть")),y=as.numeric(as.character(Survived))) ) +
stat_summary( fun.y = mean, ymin=0, ymax=1, geom="bar", size=4, fill= colours[3]) +
ylab("Процент выживаемости") + xlab("Наличие номера каюты")
ggplot(data_train, aes(x = factor(isCabin, labels =c("Нет", "Есть")), y = as.numeric(as.character(Survived)))) +
stat_summary( fun.y = "mean", geom="bar", ymin=0, ymax=1, fill= colours[3]) +
facet_grid(Pclass ~ Sex) + ylab("Процент выживаемости") + xlab("Наличие номера каюты")
data_train %<>% select(Survived, Pclass, Sex, Age, Fare, Embarked, Title, Family, isFamily, isCabin)
require(plyr)
require(dplyr)
data_train$Survived %<>% revalue(., c("0"="Died", "1" = "Survived"))
data_train$Pclass %<>% revalue(., c("1"="First", "2"="Second", "3"="Third"))
data_train$Sex %<>% revalue(., c("female"="Female", "male"="Male"))
data_train$isFamily %<>% revalue(., c("0"="No", "1"="Yes"))
data_train$isCabin %<>% revalue(., c("0"="No", "1"="Yes"))
require(caret)
set.seed(111)
split <- createDataPartition(data_train$Survived, p = 0.8, list = FALSE)
train <- slice(data_train, split)
test <- slice(data_train, -split)
cv_ctrl <- trainControl(method = "repeatedcv", repeats = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE)
set.seed(111)
glm.tune.1 <- train(Survived ~ Pclass + Sex + Age + Fare + Embarked + Family,
data = train,
method = "glm",
metric = "ROC",
trControl = cv_ctrl)
glm.tune.1
summary(glm.tune.1)
set.seed(111)
glm.tune.2 <- train(Survived ~ Pclass + Sex + Age + Fare + Embarked + Title + Family + isFamily + isCabin,
data = train,
method = "glm",
metric = "ROC",
trControl = cv_ctrl)
glm.tune.2
summary(glm.tune.2)
anova(glm.tune.2)
glmbase1 <- glm(Survived ~ Pclass + Sex + Age + Fare + Embarked + Title + Family + isFamily + isCabin, data = train, family = binomial)
summary(glmbase1)
anova(glmbase1)
glmbase1 <- glm(Survived ~ Pclass + Sex + Age + Fare + Embarked + Family, data = train, family = binomial)
anova(glmbase1)
glmbase2 <- glm(Survived ~ Pclass + Sex + Age + Fare + Embarked + Title + Family + isFamily + isCabin, data = train, family = binomial)
anova(glmbase1, glmbase2)
